"""Database session management via SQLAlchemy."""

import logging
from typing import Any

from sqlalchemy import event
from sqlalchemy.dialects import postgresql
from sqlalchemy.ext.asyncio import async_sessionmaker, create_async_engine

from {{cookiecutter.project_slug}}.settings import Environment, settings

logger = logging.getLogger(__name__)

# NB: engine connections are made lazily
async_engine = create_async_engine(
    settings.pg_async_dsn,
    pool_pre_ping=True,
)
AsyncSessionLocal = async_sessionmaker(bind=async_engine)


def print_compiled_query(
    conn: Any,
    clauseelement: Any,
    multiparams: list[Any],
    params: dict[str, Any],
    execution_options: dict[str, Any],
) -> None:
    """Log all SQL queries executed in the session.

    Listener should only be used when developing locally. Logs the SQL query with all
    inputs injected into the string. The goal of this listener is to make it easier to
    debug queries that are generated by SQLAlchemy but not doing what we expect.
    """
    logger.info(
        "\n".join(
            [
                "-- " + "*" * 10 + " EXECUTING QUERY " + "*" * 10,
                str(
                    clauseelement.compile(
                        dialect=postgresql.dialect(),  # type: ignore
                        compile_kwargs={"literal_binds": True},
                    )
                ).strip(";")
                + ";",
            ]
        )
    )


# Comment out the lines below if you don't want to see the SQL logged when developing.
if settings.env == Environment.DEV:
    event.listen(async_engine.sync_engine, "before_execute", print_compiled_query)
